#!/bin/bash

# notes:
# - clean turns a number into a nicer form: 000000.123450000 -> 0.12345
#   - formatnums does the opposite
# - add, sub, mul, div and exp only work with nice numbers
#   - tried several different methods to sum, see benchmark below
# - div's precision is limited by $PRECISION, unless it's by a multiple of 10
# - exp only takes an integer exponent
#   - if the exponent is negative it uses div so its precision is limited
# - the functions optimize a few cases when possible
# - functions that start with _ are for internal use only
# - functions that start with __ only take positive integers
# todo:
# - write div
# - scientific notation
# - exp that takes a non integer exponent
# - sin log moar

shopt -s extglob
LANG=C

_move_separator_left () {
  # $2 > 0
  (( $2 )) || return
  printf -v REPLY "%0*d" "$2"
  REPLY+=${1/.}
  if [[ $1 =~ (.*)\.(.*) ]]; then
    REPLY=${REPLY:0:${#BASH_REMATCH[1]}}.${REPLY:${#BASH_REMATCH[1]}}
  elif (( $2 )); then
    REPLY=${REPLY:0:${#1}}.${REPLY:${#1}}
  fi
}

_move_separator_right () {
  # $2 > 0
  (( $2 )) || return
  if [[ $1 =~ (.*)\.(.*) ]]; then
    printf -v REPLY "%s%0*d" "${1/.}" "$2"
    REPLY=${REPLY:0:${#BASH_REMATCH[1]}+$2}.${REPLY:${#BASH_REMATCH[1]}+$2}
  else
    printf -v REPLY "%s%0*d" "$1" "$2"
  fi
}

__mul () {
  # $1 and $2 are positive integers
  local i j tmp result carry len1=${#1} len2=${#2}
  if (( len1 + len2 < 19 )); then REPLY=$(( 10#$1 * 10#$2 ))
  else
    REPLY=0
    for (( i = len1 - 1; i >= 0 ; i-- )); do
      printf -v result "%*s" "$(( len1 - i - 1 ))"
      result=${result// /0} carry=0
      for (( j = len2 - 1; j >= 0 ; j-- )); do
        (( tmp = ${1:i:1} * ${2:j:1} + carry , carry = tmp / 10 , tmp %= 10 ))
        result=$tmp$result
      done
      result=$carry$result
      __add "$REPLY" "$result"
    done
  fi
  # mini cleanup that can greatly speed up exp
  REPLY=${REPLY##+(0)} REPLY=${REPLY:-0}
  # doing it in __add doesn't help
}

_mul () {
  local shift{1,2}
  [[ $1 =~ \.(.+) ]] && shift1=${#BASH_REMATCH[1]}
  [[ $2 =~ \.(.+) ]] && shift2=${#BASH_REMATCH[1]}
  __mul "${1/.}" "${2/.}"
  (( shift2 )) && _move_separator_left "$REPLY" "$shift2"
  (( shift1 )) && _move_separator_left "$REPLY" "$shift1"
}

mul () {
  local num1=${1#-} num2=${2#-} sign1=${1%%[!-]*} sign2=${2%%[!-]*}

  if [[ $num1 = 0 || $num2 = 0 ]]; then REPLY=0; return
  elif [[ $num1 = 1 ]]; then REPLY=$num2
  elif [[ $num2 = 1 ]]; then REPLY=$num1
  elif [[ $num1 =~ ^1(0+)$ ]]; then _move_separator_right "$num2" "${#BASH_REMATCH[1]}"
  elif [[ $num2 =~ ^1(0+)$ ]]; then _move_separator_right "$num1" "${#BASH_REMATCH[1]}"
  elif [[ $num1 =~ ^0.(0*1)$ ]]; then _move_separator_left "$num2" "${#BASH_REMATCH[1]}"
  elif [[ $num2 =~ ^0.(0*1)$ ]]; then _move_separator_left "$num1" "${#BASH_REMATCH[1]}"
  else _mul "$num1" "$num2"
  fi

  clean "$REPLY"

  [[ $sign1$sign2 = - ]] && REPLY=-$REPLY
}

__add () {
  # $1 and $2 are positive integers
  local i tmp carry num{1,2} max=$(( ${#1} > ${#2} ? ${#1} : ${#2} ))
  if (( ${#1} != ${#2} )); then
    printf -v num1 "%*s" "$max" "$1"
    printf -v num2 "%*s" "$max" "$2"
    num1=${num1// /0} num2=${num2// /0}
  else
    num1=$1 num2=$2
  fi

  if (( max < 19 )); then REPLY=$(( 10#$1 + 10#$2 ))
  else
    REPLY=

    # attempts to speed this up by adding more digits at a time utterly failed
    # bash is _really_ slow with large sums for some reason

    # method #1: iterate over strings 1 digit at a time
    #--------------------------------------------
    for (( i = max - 1; i >= 0 ; i-- )); do
      (( tmp = ${num1:i:1} + ${num2:i:1} + carry , carry = tmp / 10 , tmp %= 10 ))
      REPLY=$tmp$REPLY
    done
    REPLY=$carry$REPLY
    # 2^1000 takes less than 2s
    #--------------------------------------------

    # method #2: iterate over strings 18 digits at a time
    #--------------------------------------------
    #for (( i = max - 18; i >= 0 ; i -= 18 )); do
    #  (( tmp = 10#${num1:i:18} + 10#${num2:i:18} + carry ,
    #     carry = tmp / 1000000000000000000 ,
    #     tmp %= 1000000000000000000 ))
    #  #printf -v REPLY %018d%s "$tmp" "$REPLY"     ######## printf way
    #  tmp=000000000000000000$tmp tmp=${tmp:(-18)}  ######## pe way
    #  REPLY=$tmp$REPLY
    #done
    #(( tmp = 10#${num1::i+18} + 10#${num2::i+18} + carry ,
    #   carry = tmp / 1000000000000000000 ,
    #   tmp %= 1000000000000000000 ))
    ##printf -v REPLY %s%018d%s "$carry" "$tmp" "$REPLY"
    #tmp=000000000000000000$tmp tmp=${tmp:(-18)}
    #REPLY=$carry$tmp$REPLY

    # 2^1000 takes over 10s
    # with 10 digits it takes only 5s
    # with 2 digits it's pretty much as fast as 1 digit
    #--------------------------------------------

    # method #3: split strings to arrays, iterate over arrays
    #--------------------------------------------
    #local remainder=$(( max % 18 )) nums{1,2}
    ## split strings to arrays
    #eval eval '"nums1=(" \"\${num1:'{$((max-18))..0..18}':18}\" ")"'
    #eval eval '"nums2=(" \"\${num2:'{$((max-18))..0..18}':18}\" ")"'
    #blocks=${#nums1[@]}
    #for (( i = 0; i < blocks; i++ )); do
    #  (( tmp = 10#${nums1[i]} + 10#${nums2[i]} + carry ,
    #     carry = tmp / 1000000000000000000 ,
    #     tmp %= 1000000000000000000 ))
    #  tmp=000000000000000000$tmp tmp=${tmp:(-18)}
    #  REPLY=$tmp$REPLY
    #done
    #(( tmp = 10#${num1::remainder} + 10#${num2::remainder} + carry ,
    #   carry = tmp / 1000000000000000000 ,
    #   tmp %= 1000000000000000000 ))
    #tmp=000000000000000000$tmp tmp=${tmp:(-18)}
    #REPLY=$carry$tmp$REPLY

    # 2^1000 takes again over 10s
    # same performance as method #2
    #--------------------------------------------
  fi
}

formatnums () {
  # set {num,int,dec}{1,2} in the parent
  if [[ $1 =~ (.*)\.(.*) ]]; then int1=${BASH_REMATCH[1]} dec1=${BASH_REMATCH[2]}
  else int1=$1 dec1=
  fi
  if [[ $2 =~ (.*)\.(.*) ]]; then int2=${BASH_REMATCH[1]} dec2=${BASH_REMATCH[2]}
  else int2=$2 dec2=
  fi
  maxint=$(( ${#int1} > ${#int2} ? ${#int1} : ${#int2} ))
  maxdec=$(( ${#dec1} > ${#dec2} ? ${#dec1} : ${#dec2} ))

  printf -v num1 "%*s%-*s" "$maxint" "$int1" "$maxdec" "$dec1"
  printf -v num2 "%*s%-*s" "$maxint" "$int2" "$maxdec" "$dec2"
  num1=${num1// /0} num2=${num2// /0}
}

_add () {
  local {num,int,dec}{1,2} max{int,dec}
  formatnums "$1" "$2"
  __add "$num1" "$num2"
  _move_separator_left "$REPLY" "$maxdec"
}

add () {
  local num1=${1#-} num2=${2#-} sign1=${1%%[!-]*} sign2=${2%%[!-]*}
  if [[ $sign1 && -z $sign2 ]]; then _sub "$num2" "$num1"; clean "$REPLY"; return
  elif [[ -z $sign1 && $sign2 ]]; then _sub "$num1" "$num2"; clean "$REPLY"; return
  fi

  if [[ $num1 = 0 && $num2 = 0 ]]; then REPLY=0
  elif [[ $num1 = 0 ]]; then REPLY=$2
  elif [[ $num2 = 0 ]]; then REPLY=$1
  else _add "$num1" "$num2"; clean "$sign1$REPLY"
  fi
}

sub () {
  local num1=${1#-} num2=${2#-} sign1=${1%%[!-]*} sign2=${2%%[!-]*}
  if [[ $sign1 && -z $sign2 ]]; then _add "$num2" "$num1"; clean "-$REPLY"; return
  elif [[ -z $sign1 && $sign2 ]]; then _add "$num1" "$num2"; clean "$REPLY"; return
  fi

  if [[ $num1 = 0 && $num2 = 0 ]]; then REPLY=0
  elif [[ $num1 = "$num2" ]]; then REPLY=0
  elif [[ $num1 = 0 ]]; then [[ $sign2 ]] && REPLY=$num2 || REPLY=-$2
  elif [[ $num2 = 0 ]]; then [[ $sign1 ]] && REPLY=$num1 || REPLY=-$1
  else _sub "$num1" "$num2"
    clean "$REPLY"
    if [[ $sign1 && ${REPLY:0:1} != - ]]; then
      REPLY=-${REPLY#-}
    fi
  fi
}

_exp () {
  # exp by squaring
  if [[ $2 = 0 ]]; then REPLY=1
  elif [[ $2 = 1 ]]; then REPLY=$1
  elif [[ $2 = *[02468] ]]; then
  # mul instead of _mul is not much longer and helps a lot in simple cases
  # with lots of digits
    mul "$1" "$1"; tmp=$REPLY
    _mul "$2" 5        # times 5 and remove last digit
    _exp "$tmp" "${REPLY::(-1)}"

  else
    mul "$1" "$1"; tmp=$REPLY
    _mul "${2::(-1)}$((${2:(-1)}-1))" 5
    _exp "$tmp" "${REPLY::(-1)}"
    _mul "$1" "$REPLY"
  fi
}

exp () {
  local base=${1#-} sign1=${1%%[!-]*} exp=${2#-} sign2=${2%%[!-]*} tmp

  if [[ $exp = *.* ]]; then REPLY=error; return 1
  elif [[ $exp = 0 ]]; then REPLY=1; return
  elif [[ $base = 0 ]]; then
    if [[ $exp = -* ]]; then REPLY=NaN
    else REPLY=0
    fi
    return 1
  elif [[ $sign2 ]]; then div 1 "$base"; _exp "$REPLY" "$exp"
  else _exp "$base" "$2"
  fi
  [[ $exp = *[13579] && $sign1 ]] && REPLY=-$REPLY

  clean "$REPLY"
}

clean () {
  local num=${1#[+-]} sign=${1%%[!+-]*}
  if [[ $num = *[!0-9.]* ]]; then
    REPLY=NaN; return 1
  elif [[ $num =~ (.*)\.(.*) ]]; then
    if [[ $num = *.*[!0]* ]]; then
      [[ $num =~ (.*)\.(.*[^0]) ]]
      REPLY=${BASH_REMATCH[1]##+(0)}.${BASH_REMATCH[2]}
    else
      REPLY=${BASH_REMATCH[1]##+(0)}
    fi
    [[ $REPLY = .* ]] && REPLY=0$REPLY
  else
    REPLY=${num##+(0)} REPLY=${REPLY:-0}
  fi
  if [[ $sign = - ]]; then REPLY=-$REPLY; fi
}

# functions so simple that should never be called
lt () {
  local {num,int,dec}{1,2} max{int,dec}
  formatnums "$1" "$2"
  if [[ $num1 < "$num2" ]]; then REPLY=1; return 0
  else REPLY=0; return 1
  fi
}

le () {
  local {num,int,dec}{1,2} max{int,dec}
  formatnums "$1" "$2"
  if ! [[ $num1 > "$num2" ]]; then REPLY=1; return 0
  else REPLY=0; return 1
  fi
}

gt () {
  local {num,int,dec}{1,2} max{int,dec}
  formatnums "$1" "$2"
  if [[ $num1 > "$num2" ]]; then REPLY=1; return 0
  else REPLY=0; return 1
  fi
}

ge () {
  local {num,int,dec}{1,2} max{int,dec}
  formatnums "$1" "$2"
  if ! [[ $num1 < "$num2" ]]; then REPLY=1; return 0
  else REPLY=0; return 1
  fi
}

eq () {
  local {num,int,dec}{1,2} max{int,dec}
  formatnums "$1" "$2"
  if [[ $num1 = "$num2" ]]; then REPLY=1; return 0
  else REPLY=0; return 1
  fi
}

_sub () {
  # pass two integers to __sub, and $1 will be $2
  local {num,int,dec}{1,2} max{int,dec}
  formatnums "$1" "$2"
  if [[ $num1 > "$num2" ]]; then
    __sub "$num1" "$num2"
    _move_separator_left "$REPLY" "$maxdec"
  else
    __sub "$num2" "$num1"
    _move_separator_left "$REPLY" "$maxdec"
    REPLY=-$REPLY
  fi
}

__sub () {
  # subtraction of two positive integers that have been zero-padded
  # and now have same length

  local i len=${#1}
  if (( len < 19 )); then REPLY=$(( 10#$1 - 10#$2 )); return; fi
  REPLY=
  for (( i = 0; i < len; i++ )); do
    REPLY+=$((9 - ${2:i:1})) # 10 complement
  done
  if [[ $1 = *[0-8] ]]; then __add "${1::(-1)}$((${1:(-1)}+1))" "$REPLY"
  elif [[ $REPLY = *[0-8] ]]; then __add "$1" "${REPLY::(-1)}$((${REPLY:(-1)}+1))"
  else
    __add "$1" "$REPLY"
    if [[ $REPLY = [0-8] ]]; then REPLY=${REPLY::(-1)}$((${REPLY:(-1)}+1))
    else __add "$REPLY" 1
    fi
  fi
  REPLY=$((${REPLY:0:1} - 1))${REPLY:1}
}

div () {
  local num1=${1#-} num2=${2#-} sign1=${1%%[!-]*} sign2=${2%%[!-]*}

  [[ $sign1 && $sign2 ]] && sign1= sign2=

  if [[ $num1 = "$num2" ]]; then REPLY=1
  elif [[ $num1 = 0 ]]; then REPLY=0; return
  elif [[ $num2 = 0 ]]; then REPLY=NaN; return
  elif [[ $num2 = 1 ]]; then REPLY=$num1
  elif [[ $num2 =~ ^1(0+)$ ]]; then _move_separator_left "$num1" "${#BASH_REMATCH[1]}"
  elif [[ $num2 =~ ^0.(0*1)$ ]]; then _move_separator_right "$num1" "${#BASH_REMATCH[1]}"
  else _div "$num1" "$num2"
  fi
  clean "$REPLY"
  REPLY=$sign1$sign2$REPLY
}

_div () {
  __div "$@"
}

__div () {
  # $1 > $2 and they're integers
  REPLY=$(bc -l <<< "$1 / $2")
}
